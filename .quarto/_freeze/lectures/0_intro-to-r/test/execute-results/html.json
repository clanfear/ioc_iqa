{
  "hash": "c9736f36ed2cd71c979579f01c1da9b9",
  "result": {
    "markdown": "---\ntitle: \"Presentation Ninja\"\nsubtitle: \"⚔<br/>with xaringan\"\nauthor: \"Yihui Xie\"\ninstitute: \"RStudio, PBC\"\ndate: \"2016/12/12 (updated: 2022-10-03)\"\noutput:\n  xaringan::moon_reader:\n    lib_dir: libs\n    nature:\n      highlightStyle: github\n      highlightLines: true\n      countIncrementalSlides: false\n---\n\n\nbackground-image: url(https://upload.wikimedia.org/wikipedia/commons/b/be/Sharingan_triple.svg)\n\n\n\n\n\n???\n\nImage credit: [Wikimedia Commons](https://commons.wikimedia.org/wiki/File:Sharingan_triple.svg)\n\n\n---\nclass: center, middle\n\n# xaringan\n\n### /ʃaː.'riŋ.ɡan/\n\n---\n\nclass: inverse, center, middle\n\n# Get Started\n\n---\n\n# Hello World\n\nInstall the **xaringan** package from [Github](https://github.com/yihui/xaringan):\n\n\n::: {.cell}\n\n```{.r .cell-code}\nremotes::install_github(\"yihui/xaringan\")\n```\n:::\n\n\n--\n\nYou are recommended to use the [RStudio IDE](https://www.rstudio.com/products/rstudio/), but you do not have to.\n\n- Create a new R Markdown document from the menu `File -> New File -> R Markdown -> From Template -> Ninja Presentation`;<sup>1</sup>\n\n--\n\n- Click the `Knit` button to compile it;\n\n--\n\n- or use the [RStudio Addin](https://rstudio.github.io/rstudioaddins/)<sup>2</sup> \"Infinite Moon Reader\" to live preview the slides (every time you update and save the Rmd document, the slides will be automatically reloaded in RStudio Viewer.\n\n.footnote[\n[1] 中文用户请看[这份教程](https://slides.yihui.org/xaringan/zh-CN.html)\n\n[2] See [#2](https://github.com/yihui/xaringan/issues/2) if you do not see the template or addin in RStudio.\n]\n\n\n---\nbackground-image: url(https://github.com/yihui/xaringan/releases/download/v0.0.2/karl-moustache.jpg)\nbackground-position: 50% 50%\nclass: center, bottom, inverse\n\n# You only live once!\n\n---\n\n\n# Hello Ninja\n\nAs a presentation ninja, you certainly should not be satisfied by the \"Hello World\" example. You need to understand more about two things:\n\n1. The [remark.js](https://remarkjs.com) library;\n\n1. The **xaringan** package;\n\nBasically **xaringan** injected the chakra of R Markdown (minus Pandoc) into **remark.js**. The slides are rendered by remark.js in the web browser, and the Markdown source needed by remark.js is generated from R Markdown (**knitr**).\n\n---\n\n# remark.js\n\nYou can see an introduction of remark.js from [its homepage](https://remarkjs.com). You should read the [remark.js Wiki](https://github.com/gnab/remark/wiki) at least once to know how to\n\n- create a new slide (Markdown syntax<sup>*</sup> and slide properties);\n\n- format a slide (e.g. text alignment);\n\n- configure the slideshow;\n\n- and use the presentation (keyboard shortcuts).\n\nIt is important to be familiar with remark.js before you can understand the options in **xaringan**.\n\n.footnote[[*] It is different with Pandoc's Markdown! It is limited but should be enough for presentation purposes. Come on... You do not need a slide for the Table of Contents! Well, the Markdown support in remark.js [may be improved](https://github.com/gnab/remark/issues/142) in the future.]\n\n\n---\nbackground-image: url(https://github.com/yihui/xaringan/releases/download/v0.0.2/karl-moustache.jpg)\nbackground-size: cover\nclass: center, bottom, inverse\n\n# I was so happy to have discovered remark.js!\n\n---\n\nclass: inverse, middle, center\n\n# Using xaringan\n\n---\n\n# xaringan\n\nProvides an R Markdown output format `xaringan::moon_reader` as a wrapper for remark.js, and you can use it in the YAML metadata, e.g.\n\n```yaml\n---\ntitle: \"A Cool Presentation\"\noutput:\n  xaringan::moon_reader:\n    yolo: true\n    nature:\n      autoplay: 30000\n---\n```\n\nSee the help page `?xaringan::moon_reader` for all possible options that you can use.\n\n---\n\n# remark.js vs xaringan\n\nSome differences between using remark.js (left) and using **xaringan** (right):\n\n.pull-left[\n1. Start with a boilerplate HTML file;\n\n1. Plain Markdown;\n\n1. Write JavaScript to autoplay slides;\n\n1. Manually configure MathJax;\n\n1. Highlight code with `*`;\n\n1. Edit Markdown source and refresh browser to see updated slides;\n]\n\n.pull-right[\n1. Start with an R Markdown document;\n\n1. R Markdown (can embed R/other code chunks);\n\n1. Provide an option `autoplay`;\n\n1. MathJax just works;<sup>*</sup>\n\n1. Highlight code with `{{}}`;\n\n1. The RStudio addin \"Infinite Moon Reader\" automatically refreshes slides on changes;\n]\n\n.footnote[[*] Not really. See next page.]\n\n---\n\n# Math Expressions\n\nYou can write LaTeX math expressions inside a pair of dollar signs, e.g. &#36;\\alpha+\\beta$ renders $\\alpha+\\beta$. You can use the display style with double dollar signs:\n\n```\n\n$$\\bar{X}=\\frac{1}{n}\\sum_{i=1}^nX_i$$\n\n```\n\n\n$$\\bar{X}=\\frac{1}{n}\\sum_{i=1}^nX_i$$\n\n\nLimitations:\n\n1. The source code of a LaTeX math expression must be in one line, unless it is inside a pair of double dollar signs, in which case the starting `$$` must appear in the very beginning of a line, followed immediately by a non-space character, and the ending `$$` must be at the end of a line, led by a non-space character;\n\n1. There should not be spaces after the opening `$` or before the closing `$`.\n\n1. Math does not work on the title slide (see [#61](https://github.com/yihui/xaringan/issues/61) for a workaround).\n\n---\n\n# R Code\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# a boring regression\nfit = lm(dist ~ 1 + speed, data = cars)\ncoef(summary(fit))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#               Estimate Std. Error   t value     Pr(>|t|)\n# (Intercept) -17.579095  6.7584402 -2.601058 1.231882e-02\n# speed         3.932409  0.4155128  9.463990 1.489836e-12\n```\n:::\n\n```{.r .cell-code}\ndojutsu = c('地爆天星', '天照', '加具土命', '神威', '須佐能乎', '無限月読')\ngrep('天', dojutsu, value = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# [1] \"地爆天星\" \"天照\"\n```\n:::\n:::\n\n\n---\n\n# R Plots\n\n\n::: {.cell}\n\n```{.r .cell-code}\npar(mar = c(4, 4, 1, .1))\nplot(cars, pch = 19, col = 'darkgray', las = 1)\nabline(fit, lwd = 2)\n```\n\n::: {.cell-output-display}\n![](test_files/figure-html/cars-1.svg){width=672}\n:::\n:::\n\n\n---\n\n# Tables\n\nIf you want to generate a table, make sure it is in the HTML format (instead of Markdown or other formats), e.g.,\n\n\n::: {.cell}\n\n```{.r .cell-code}\nknitr::kable(head(iris), format = 'html')\n```\n\n::: {.cell-output-display}\n`````{=html}\n<table>\n <thead>\n  <tr>\n   <th style=\"text-align:right;\"> Sepal.Length </th>\n   <th style=\"text-align:right;\"> Sepal.Width </th>\n   <th style=\"text-align:right;\"> Petal.Length </th>\n   <th style=\"text-align:right;\"> Petal.Width </th>\n   <th style=\"text-align:left;\"> Species </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:right;\"> 5.1 </td>\n   <td style=\"text-align:right;\"> 3.5 </td>\n   <td style=\"text-align:right;\"> 1.4 </td>\n   <td style=\"text-align:right;\"> 0.2 </td>\n   <td style=\"text-align:left;\"> setosa </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 4.9 </td>\n   <td style=\"text-align:right;\"> 3.0 </td>\n   <td style=\"text-align:right;\"> 1.4 </td>\n   <td style=\"text-align:right;\"> 0.2 </td>\n   <td style=\"text-align:left;\"> setosa </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 4.7 </td>\n   <td style=\"text-align:right;\"> 3.2 </td>\n   <td style=\"text-align:right;\"> 1.3 </td>\n   <td style=\"text-align:right;\"> 0.2 </td>\n   <td style=\"text-align:left;\"> setosa </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 4.6 </td>\n   <td style=\"text-align:right;\"> 3.1 </td>\n   <td style=\"text-align:right;\"> 1.5 </td>\n   <td style=\"text-align:right;\"> 0.2 </td>\n   <td style=\"text-align:left;\"> setosa </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 5.0 </td>\n   <td style=\"text-align:right;\"> 3.6 </td>\n   <td style=\"text-align:right;\"> 1.4 </td>\n   <td style=\"text-align:right;\"> 0.2 </td>\n   <td style=\"text-align:left;\"> setosa </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 5.4 </td>\n   <td style=\"text-align:right;\"> 3.9 </td>\n   <td style=\"text-align:right;\"> 1.7 </td>\n   <td style=\"text-align:right;\"> 0.4 </td>\n   <td style=\"text-align:left;\"> setosa </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\n---\n\n# HTML Widgets\n\nI have not thoroughly tested HTML widgets against **xaringan**. Some may work well, and some may not. It is a little tricky.\n\nSimilarly, the Shiny mode (`runtime: shiny`) does not work. I might get these issues fixed in the future, but these are not of high priority to me. I never turn my presentation into a Shiny app. When I need to demonstrate more complicated examples, I just launch them separately. It is convenient to share slides with other people when they are plain HTML/JS applications.\n\nSee the next page for two HTML widgets.\n\n---\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(leaflet)\nleaflet() %>% addTiles() %>% setView(-93.65, 42.0285, zoom = 17)\n```\n\n::: {.cell-output-display}\n```{=html}\n<div id=\"htmlwidget-6d3ebbcdd83700c38dba\" style=\"width:100%;height:576px;\" class=\"leaflet html-widget\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-6d3ebbcdd83700c38dba\">{\"x\":{\"options\":{\"crs\":{\"crsClass\":\"L.CRS.EPSG3857\",\"code\":null,\"proj4def\":null,\"projectedBounds\":null,\"options\":{}}},\"calls\":[{\"method\":\"addTiles\",\"args\":[\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",null,null,{\"minZoom\":0,\"maxZoom\":18,\"tileSize\":256,\"subdomains\":\"abc\",\"errorTileUrl\":\"\",\"tms\":false,\"noWrap\":false,\"zoomOffset\":0,\"zoomReverse\":false,\"opacity\":1,\"zIndex\":1,\"detectRetina\":false,\"attribution\":\"&copy; <a href=\\\"https://openstreetmap.org\\\">OpenStreetMap<\\/a> contributors, <a href=\\\"https://creativecommons.org/licenses/by-sa/2.0/\\\">CC-BY-SA<\\/a>\"}]}],\"setView\":[[42.0285,-93.65],17,[]]},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\n\n---\n\n\n::: {.cell}\n\n```{.r .cell-code}\nDT::datatable(\n  head(iris, 10),\n  fillContainer = FALSE, options = list(pageLength = 8)\n)\n```\n\n::: {.cell-output-display}\n```{=html}\n<div id=\"htmlwidget-d374928a0613440d501e\" style=\"width:100%;height:auto;\" class=\"datatables html-widget\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-d374928a0613440d501e\">{\"x\":{\"filter\":\"none\",\"vertical\":false,\"fillContainer\":false,\"data\":[[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\"],[5.1,4.9,4.7,4.6,5,5.4,4.6,5,4.4,4.9],[3.5,3,3.2,3.1,3.6,3.9,3.4,3.4,2.9,3.1],[1.4,1.4,1.3,1.5,1.4,1.7,1.4,1.5,1.4,1.5],[0.2,0.2,0.2,0.2,0.2,0.4,0.3,0.2,0.2,0.1],[\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\"]],\"container\":\"<table class=\\\"display\\\">\\n  <thead>\\n    <tr>\\n      <th> <\\/th>\\n      <th>Sepal.Length<\\/th>\\n      <th>Sepal.Width<\\/th>\\n      <th>Petal.Length<\\/th>\\n      <th>Petal.Width<\\/th>\\n      <th>Species<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"pageLength\":8,\"columnDefs\":[{\"className\":\"dt-right\",\"targets\":[1,2,3,4]},{\"orderable\":false,\"targets\":0}],\"order\":[],\"autoWidth\":false,\"orderClasses\":false,\"lengthMenu\":[8,10,25,50,100]}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\n\n---\n\n# Some Tips\n\n- Do not forget to try the `yolo` option of `xaringan::moon_reader`.\n\n    ```yaml\n    output:\n      xaringan::moon_reader:\n        yolo: true\n    ```\n\n---\n\n# Some Tips\n\n- Slides can be automatically played if you set the `autoplay` option under `nature`, e.g. go to the next slide every 30 seconds in a lightning talk:\n\n    ```yaml\n    output:\n      xaringan::moon_reader:\n        nature:\n          autoplay: 30000\n    ```\n\n- If you want to restart the play after it reaches the last slide, you may set the sub-option `loop` to TRUE, e.g.,\n\n    ```yaml\n    output:\n      xaringan::moon_reader:\n        nature:\n          autoplay:\n            interval: 30000\n            loop: true\n    ```\n\n---\n\n# Some Tips\n\n- A countdown timer can be added to every page of the slides using the `countdown` option under `nature`, e.g. if you want to spend one minute on every page when you give the talk, you can set:\n\n    ```yaml\n    output:\n      xaringan::moon_reader:\n        nature:\n          countdown: 60000\n    ```\n\n    Then you will see a timer counting down from `01:00`, to `00:59`, `00:58`, ... When the time is out, the timer will continue but the time turns red.\n    \n---\n\n# Some Tips\n\n- The title slide is created automatically by **xaringan**, but it is just another remark.js slide added before your other slides.\n\n    The title slide is set to `class: center, middle, inverse, title-slide` by default. You can change the classes applied to the title slide with the `titleSlideClass` option of `nature` (`title-slide` is always applied).\n\n    ```yaml\n    output:\n      xaringan::moon_reader:\n        nature:\n          titleSlideClass: [top, left, inverse]\n    ```\n    \n--\n\n- If you'd like to create your own title slide, disable **xaringan**'s title slide with the `seal = FALSE` option of `moon_reader`.\n\n    ```yaml\n    output:\n      xaringan::moon_reader:\n        seal: false\n    ```\n\n---\n\n# Some Tips\n\n- There are several ways to build incremental slides. See [this presentation](https://slides.yihui.org/xaringan/incremental.html) for examples.\n\n- The option `highlightLines: true` of `nature` will highlight code lines that start with `*`, or are wrapped in `{{ }}`, or have trailing comments `#<<`;\n\n    ```yaml\n    output:\n      xaringan::moon_reader:\n        nature:\n          highlightLines: true\n    ```\n\n    See examples on the next page.\n\n---\n\n# Some Tips\n\n\n.pull-left[\nAn example using a leading `*`:\n\n    ```r\n    if (TRUE) {\n    ** message(\"Very important!\")\n    }\n    ```\nOutput:\n```r\nif (TRUE) {\n* message(\"Very important!\")\n}\n```\n\nThis is invalid R code, so it is a plain fenced code block that is not executed.\n]\n\n.pull-right[\nAn example using `{{}}`:\n\n````\n```{r tidy=FALSE}\nif (TRUE) {\n*{{ message(\"Very important!\") }}\n}\n```\n````\nOutput:\n\n::: {.cell}\n\n```{.r .cell-code}\nif (TRUE) {\n{{ message(\"Very important!\") }}\n}\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nVery important!\n```\n:::\n:::\n\n\nIt is valid R code so you can run it. Note that `{{}}` can wrap an R expression of multiple lines.\n]\n\n---\n\n# Some Tips\n\nAn example of using the trailing comment `#<<` to highlight lines:\n\n````markdown\n```{r tidy=FALSE}\nlibrary(ggplot2)\nggplot(mtcars) + \n  aes(mpg, disp) + \n  geom_point() +   #<<\n  geom_smooth()    #<<\n```\n````\n\nOutput:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nggplot(mtcars) + \n  aes(mpg, disp) + \n  geom_point() +   #<<\n  geom_smooth()    #<<\n```\n:::\n\n\n---\n\n# Some Tips\n\nWhen you enable line-highlighting, you can also use the chunk option `highlight.output` to highlight specific lines of the text output from a code chunk. For example, `highlight.output = TRUE` means highlighting all lines, and `highlight.output = c(1, 3)` means highlighting the first and third line.\n\n````md\n```{r, highlight.output=c(1, 3)}\nhead(iris)\n```\n````\n\n\n::: {.cell highlight.output='[1,3]'}\n::: {.cell-output .cell-output-stdout}\n```\n  Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n1          5.1         3.5          1.4         0.2  setosa\n2          4.9         3.0          1.4         0.2  setosa\n3          4.7         3.2          1.3         0.2  setosa\n4          4.6         3.1          1.5         0.2  setosa\n5          5.0         3.6          1.4         0.2  setosa\n6          5.4         3.9          1.7         0.4  setosa\n```\n:::\n:::\n\n\nQuestion: what does `highlight.output = c(TRUE, FALSE)` mean? (Hint: think about R's recycling of vectors)\n\n---\n\n# Some Tips\n\n- To make slides work offline, you need to download a copy of remark.js in advance, because **xaringan** uses the online version by default (see the help page `?xaringan::moon_reader`).\n\n- You can use `xaringan::summon_remark()` to download the latest or a specified version of remark.js. By default, it is downloaded to `libs/remark-latest.min.js`.\n\n- Then change the `chakra` option in YAML to point to this file, e.g.\n\n    ```yaml\n    output:\n      xaringan::moon_reader:\n        chakra: libs/remark-latest.min.js\n    ```\n\n- If you used Google fonts in slides (the default theme uses _Yanone Kaffeesatz_, _Droid Serif_, and _Source Code Pro_), they won't work offline unless you download or install them locally. The Heroku app [google-webfonts-helper](https://google-webfonts-helper.herokuapp.com/fonts) can help you download fonts and generate the necessary CSS.\n\n---\n\n# Macros\n\n- remark.js [allows users to define custom macros](https://github.com/yihui/xaringan/issues/80) (JS functions) that can be applied to Markdown text using the syntax `![:macroName arg1, arg2, ...]` or `![:macroName arg1, arg2, ...](this)`. For example, before remark.js initializes the slides, you can define a macro named `scale`:\n\n    ```js\n    remark.macros.scale = function (percentage) {\n      var url = this;\n      return '<img src=\"' + url + '\" style=\"width: ' + percentage + '\" />';\n    };\n    ```\n\n    Then the Markdown text\n\n    ```markdown\n    ![:scale 50%](image.jpg)\n    ```\n\n    will be translated to\n    \n    ```html\n    <img src=\"image.jpg\" style=\"width: 50%\" />\n    ```\n\n---\n\n# Macros (continued)\n\n- To insert macros in **xaringan** slides, you can use the option `beforeInit` under the option `nature`, e.g.,\n\n    ```yaml\n    output:\n      xaringan::moon_reader:\n        nature:\n          beforeInit: \"macros.js\"\n    ```\n\n    You save your remark.js macros in the file `macros.js`.\n\n- The `beforeInit` option can be used to insert arbitrary JS code before `remark.create()`. Inserting macros is just one of its possible applications.\n\n---\n\n# CSS\n\nAmong all options in `xaringan::moon_reader`, the most challenging but perhaps also the most rewarding one is `css`, because it allows you to customize the appearance of your slides using any CSS rules or hacks you know.\n\nYou can see the default CSS file [here](https://github.com/yihui/xaringan/blob/master/inst/rmarkdown/templates/xaringan/resources/default.css). You can completely replace it with your own CSS files, or define new rules to override the default. See the help page `?xaringan::moon_reader` for more information.\n\n---\n\n# CSS\n\nFor example, suppose you want to change the font for code from the default \"Source Code Pro\" to \"Ubuntu Mono\". You can create a CSS file named, say, `ubuntu-mono.css`:\n\n```css\n@import url(https://fonts.googleapis.com/css?family=Ubuntu+Mono:400,700,400italic);\n\n.remark-code, .remark-inline-code { font-family: 'Ubuntu Mono'; }\n```\n\nThen set the `css` option in the YAML metadata:\n\n```yaml\noutput:\n  xaringan::moon_reader:\n    css: [\"default\", \"ubuntu-mono.css\"]\n```\n\nHere I assume `ubuntu-mono.css` is under the same directory as your Rmd.\n\nSee [yihui/xaringan#83](https://github.com/yihui/xaringan/issues/83) for an example of using the [Fira Code](https://github.com/tonsky/FiraCode) font, which supports ligatures in program code.\n\n---\n\n# CSS (with Sass)\n\n**xaringan** also supports Sass support via **rmarkdown**. Suppose you want to use the same color for different elements, e.g., first heading and bold text. You can create a `.scss` file, say `mytheme.scss`, using the [sass](https://sass-lang.com/) syntax with variables:\n\n```scss\n$mycolor: #ff0000; \n.remark-slide-content > h1 { color: $mycolor; }\n.remark-slide-content strong { color: $mycolor; }\n```\n\nThen set the `css` option in the YAML metadata using this file placed under the same directory as your Rmd:\n\n```yaml\noutput:\n  xaringan::moon_reader:\n    css: [\"default\", \"mytheme.scss\"]\n```\n\nThis requires **rmarkdown** >= 2.8 and the [**sass**](https://rstudio.github.io/sass/) package. You can learn more about **rmarkdown** and **sass** support in [this blog post](https://blog.rstudio.com/2021/04/15/2021-spring-rmd-news/#sass-and-scss-support-for-html-based-output) and in [**sass** overview vignette](https://rstudio.github.io/sass/articles/sass.html).\n\n---\n\n# Themes\n\nDon't want to learn CSS? Okay, you can use some user-contributed themes. A theme typically consists of two CSS files `foo.css` and `foo-fonts.css`, where `foo` is the theme name. Below are some existing themes:\n\n\n::: {.cell R.options='{\"width\":70}'}\n\n```{.r .cell-code}\nnames(xaringan:::list_css())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"chocolate-fonts\"  \"chocolate\"        \"default-fonts\"   \n [4] \"default\"          \"duke-blue\"        \"fc-fonts\"        \n [7] \"fc\"               \"glasgow_template\" \"hygge-duke\"      \n[10] \"hygge\"            \"ki-fonts\"         \"ki\"              \n[13] \"kunoichi\"         \"lucy-fonts\"       \"lucy\"            \n[16] \"metropolis-fonts\" \"metropolis\"       \"middlebury-fonts\"\n[19] \"middlebury\"       \"nhsr-fonts\"       \"nhsr\"            \n[22] \"ninjutsu\"         \"rladies-fonts\"    \"rladies\"         \n[25] \"robot-fonts\"      \"robot\"            \"rutgers-fonts\"   \n[28] \"rutgers\"          \"shinobi\"          \"tamu-fonts\"      \n[31] \"tamu\"             \"uio-fonts\"        \"uio\"             \n[34] \"uo-fonts\"         \"uo\"               \"uol-fonts\"       \n[37] \"uol\"              \"useR-fonts\"       \"useR\"            \n[40] \"uwm-fonts\"        \"uwm\"              \"wic-fonts\"       \n[43] \"wic\"             \n```\n:::\n:::\n\n\n---\n\n# Themes\n\nTo use a theme, you can specify the `css` option as an array of CSS filenames (without the `.css` extensions), e.g.,\n\n```yaml\noutput:\n  xaringan::moon_reader:\n    css: [default, metropolis, metropolis-fonts]\n```\n\nIf you want to contribute a theme to **xaringan**, please read [this blog post](https://yihui.org/en/2017/10/xaringan-themes).\n\n\n---\nclass: inverse, middle, center\nbackground-image: url(https://upload.wikimedia.org/wikipedia/commons/3/39/Naruto_Shiki_Fujin.svg)\nbackground-size: contain\n\n# Naruto\n\n---\n\nbackground-image: url(https://upload.wikimedia.org/wikipedia/commons/b/be/Sharingan_triple.svg)\nbackground-size: 100px\nbackground-position: 90% 8%\n\n# Sharingan\n\nThe R package name **xaringan** was derived<sup>1</sup> from **Sharingan**, a dōjutsu in the Japanese anime _Naruto_ with two abilities:\n\n- the \"Eye of Insight\"\n\n- the \"Eye of Hypnotism\"\n\nI think a presentation is basically a way to communicate insights to the audience, and a great presentation may even \"hypnotize\" the audience.<sup>2,3</sup>\n\n.footnote[\n[1] In Chinese, the pronounciation of _X_ is _Sh_ /ʃ/ (as in _shrimp_). Now you should have a better idea of how to pronounce my last name _Xie_.\n\n[2] By comparison, bad presentations only put the audience to sleep.\n\n[3] Personally I find that setting background images for slides is a killer feature of remark.js. It is an effective way to bring visual impact into your presentations.\n]\n\n---\n\n# Naruto terminology\n\nThe **xaringan** package borrowed a few terms from Naruto, such as\n\n- [Sharingan](https://naruto.fandom.com/wiki/Sharingan) (写輪眼; the package name)\n\n- The [moon reader](https://naruto.fandom.com/wiki/Moon_Reader) (月読; an attractive R Markdown output format)\n\n- [Chakra](https://naruto.fandom.com/wiki/Chakra) (查克拉; the path to the remark.js library, which is the power to drive the presentation)\n\n- [Nature transformation](https://naruto.fandom.com/wiki/Nature_Transformation) (性質変化; transform the chakra by setting different options)\n\n- The [infinite moon reader](https://naruto.fandom.com/wiki/Infinite_Tsukuyomi) (無限月読; start a local web server to continuously serve your slides)\n\n- The [summoning technique](https://naruto.fandom.com/wiki/Summoning_Technique) (download remark.js from the web)\n\nYou can click the links to know more about them if you want. The jutsu \"Moon Reader\" may seem a little evil, but that does not mean your slides are evil.\n\n---\n\nclass: center\n\n# Hand seals (印)\n\nPress `h` or `?` to see the possible ninjutsu you can use in remark.js.\n\n![](https://upload.wikimedia.org/wikipedia/commons/7/7e/Mudra-Naruto-KageBunshin.svg)\n\n---\n\nclass: center, middle\n\n# Thanks!\n\nSlides created via the R package [**xaringan**](https://github.com/yihui/xaringan).\n\nThe chakra comes from [remark.js](https://remarkjs.com), [**knitr**](https://yihui.org/knitr/), and [R Markdown](https://rmarkdown.rstudio.com).\n",
    "supporting": [
      "test_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../../site_libs/htmlwidgets/htmlwidgets.js\"></script>\r\n<script src=\"../../site_libs/jquery/jquery-3.6.0.min.js\"></script>\r\n<link href=\"../../site_libs/leaflet/leaflet.css\" rel=\"stylesheet\" />\r\n<script src=\"../../site_libs/leaflet/leaflet.js\"></script>\r\n<link href=\"../../site_libs/leafletfix/leafletfix.css\" rel=\"stylesheet\" />\r\n<script src=\"../../site_libs/proj4/proj4.min.js\"></script>\r\n<script src=\"../../site_libs/Proj4Leaflet/proj4leaflet.js\"></script>\r\n<link href=\"../../site_libs/rstudio_leaflet/rstudio_leaflet.css\" rel=\"stylesheet\" />\r\n<script src=\"../../site_libs/leaflet-binding/leaflet.js\"></script>\r\n<link href=\"../../site_libs/datatables-css/datatables-crosstalk.css\" rel=\"stylesheet\" />\r\n<script src=\"../../site_libs/datatables-binding/datatables.js\"></script>\r\n<link href=\"../../site_libs/dt-core/css/jquery.dataTables.min.css\" rel=\"stylesheet\" />\r\n<link href=\"../../site_libs/dt-core/css/jquery.dataTables.extra.css\" rel=\"stylesheet\" />\r\n<script src=\"../../site_libs/dt-core/js/jquery.dataTables.min.js\"></script>\r\n<link href=\"../../site_libs/crosstalk/css/crosstalk.min.css\" rel=\"stylesheet\" />\r\n<script src=\"../../site_libs/crosstalk/js/crosstalk.min.js\"></script>\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}